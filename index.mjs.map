{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport normalizeIndex from '@stdlib/ndarray-base-normalize-index';\nimport { factory as indexFunction } from '@stdlib/ndarray-base-ind';\nimport take2d from '@stdlib/array-base-take2d';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// VARIABLES //\n\nvar NDIMS = 3;\n\n\n// MAIN //\n\n/**\n* Takes elements from a three-dimensional nested array.\n*\n* ## Notes\n*\n* -   The function does **not** deep copy nested array elements.\n*\n* @param {ArrayLikeObject<Collection>} x - input array\n* @param {NonNegativeIntegerArray} indices - list of indices\n* @param {integer} dimension - dimension along which to take elements\n* @param {string} mode - index mode specifying how to handle an index which is out-of-bounds\n* @throws {RangeError} third argument exceeds the number of dimensions\n* @throws {TypeError} fourth argument must be a recognized index mode\n* @returns {(Array<Array>|Array<Collection>)} output array\n*\n* @example\n* var x = [ [ [ 1, 2 ], [ 3, 4 ] ] ];\n* var indices = [ 1, 1, 0, 0, -1, -1 ];\n*\n* var y = take3d( x, indices, 2, 'normalize' );\n* // returns [ [ [ 2, 2, 1, 1, 2, 2 ], [ 4, 4, 3, 3, 4, 4 ] ] ]\n*/\nfunction take3d( x, indices, dimension, mode ) {\n\tvar lastIndex;\n\tvar out;\n\tvar dim;\n\tvar ind;\n\tvar idx;\n\tvar i;\n\n\tdim = normalizeIndex( dimension, NDIMS-1 );\n\tif ( dim === -1 ) {\n\t\tthrow new RangeError( format( '1mTFD', NDIMS, dimension ) );\n\t}\n\tout = [];\n\tif ( dim === 0 ) {\n\t\tind = indexFunction( mode );\n\t\tlastIndex = x.length - 1;\n\t\tfor ( i = 0; i < indices.length; i++ ) {\n\t\t\tidx = ind( indices[ i ], lastIndex );\n\t\t\tout.push( x[ idx ] );\n\t\t}\n\t\treturn out;\n\t}\n\t// Case: dim > 0\n\tdim = dimension - 1;\n\tfor ( i = 0; i < x.length; i++ ) {\n\t\tout.push( take2d( x[ i ], indices, dim, mode ) );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default take3d;\n"],"names":["take3d","x","indices","dimension","mode","lastIndex","out","dim","ind","idx","i","normalizeIndex","NDIMS","RangeError","format","indexFunction","length","push","take2d"],"mappings":";;0YAyDA,SAASA,EAAQC,EAAGC,EAASC,EAAWC,GACvC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EAGJ,IAAc,KADdH,EAAMI,EAAgBR,EAAWS,IAEhC,MAAM,IAAIC,WAAYC,EAAQ,QArCpB,EAqCoCX,IAG/C,GADAG,EAAM,GACO,IAARC,EAAY,CAGhB,IAFAC,EAAMO,EAAeX,GACrBC,EAAYJ,EAAEe,OAAS,EACjBN,EAAI,EAAGA,EAAIR,EAAQc,OAAQN,IAChCD,EAAMD,EAAKN,EAASQ,GAAKL,GACzBC,EAAIW,KAAMhB,EAAGQ,IAEd,OAAOH,CACP,CAGD,IADAC,EAAMJ,EAAY,EACZO,EAAI,EAAGA,EAAIT,EAAEe,OAAQN,IAC1BJ,EAAIW,KAAMC,EAAQjB,EAAGS,GAAKR,EAASK,EAAKH,IAEzC,OAAOE,CACR"}